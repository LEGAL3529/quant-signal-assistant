from binance import Client
import numpy as np
import pickle

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–≤–æ–∏ –∫–ª—é—á–∏
API_KEY = 'QCI76yYs5jbuYqS4geSkEZHhkPJq0QZCOz1pXGIEdIOvfN36RLrkbaaa41OI983T'
API_SECRET = 'EpMK5GTSHJxMFf42IhzGCpVLgxywR60Lz9lWDu7votvjLVgwinY6c5wydupOnVRV'

client = Client(API_KEY, API_SECRET)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
with open("models/signal_model.pkl", "rb") as f:
    model = pickle.load(f)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
def get_latest_prices(symbol="BTCUSDT", limit=5):
    klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1MINUTE, limit=limit)
    closes = [float(kline[4]) for kline in klines]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
    return closes

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
prices = get_latest_prices()

# –ü–æ–¥–∞—ë–º –≤ –º–æ–¥–µ–ª—å
X = np.array(prices).reshape(1, -1)
prediction = model.predict(X)[0]
label = "BUY" if prediction == 1 else "SELL"

print(f"üß† –†–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {prices}: {label}")
